#!/usr/bin/env python3

import sys
import os
import base64
import cbor2
import json
from OpenSSL import crypto
import pytest


from verifiably_checker import attestation


EXAMPLE_ATT_DOC = "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"


def test_check_correct_pcr():
    doc_obj = {'pcrs':{
        0: bytes.fromhex('a123'),
        1: bytes.fromhex('b456')
        }
    }

    expected_pcrs = {'0':'a123', '1':'b456'}

    assert attestation.verify_pcrs(doc_obj, expected_pcrs) == True


def test_check_wrong_pcr():
    doc_obj = {'pcrs':{
        0: bytes.fromhex('a123'),
        1: bytes.fromhex('b456')
        }
    }

    expected_pcrs = {'0':'a12', '1':'b456'}

    assert attestation.verify_pcrs(doc_obj, expected_pcrs) == False


def test_validate_signature():
    attestation_doc = base64.b64decode(EXAMPLE_ATT_DOC)

    data = cbor2.loads(attestation_doc)
    doc = data[2]
    doc_obj = cbor2.loads(doc)

    assert attestation.validate_signature(data, doc, doc_obj) == True


def test_validate_signature_modify_user_data():
    attestation_doc = base64.b64decode(EXAMPLE_ATT_DOC)

    data = cbor2.loads(attestation_doc)
    doc = data[2]
    doc_obj = cbor2.loads(doc)

    # Modify user data
    user_data = json.loads(doc_obj['user_data'])
    user_data['result'] = True
    doc_obj['user_data'] = json.dumps(user_data)
    doc = cbor2.dumps(doc_obj)


    assert attestation.validate_signature(data, doc, doc_obj) == False


def test_validate_signature_modify_signature():
    attestation_doc = base64.b64decode(EXAMPLE_ATT_DOC)

    data = cbor2.loads(attestation_doc)
    doc = data[2]
    doc_obj = cbor2.loads(doc)

    # Modify signature

    signature_value = data[3].hex()
    signature_value = '0' + signature_value[1:]
    data[3] = bytes.fromhex(signature_value)


    assert attestation.validate_signature(data, doc, doc_obj) == False


def test_validate_certificate():
    certificate = '3082027c30820201a0030201020210017fb8b2974076e900000000623b9237300a06082a8648ce3d04030330818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30646462303366366631663135633861662e75732d656173742d322e6177732e6e6974726f2d656e636c61766573301e170d3232303332333231333334305a170d3232303332343030333334335a308193310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753313e303c06035504030c35692d30646462303366366631663135633861662d656e63303137666238623239373430373665392e75732d656173742d322e6177733076301006072a8648ce3d020106052b810400220362000461501d1c1bdc606ef8ae45fd369f92132a5575dd9c1f93fe1913f832ad9324a4ae1e83d611045b84d37b790799023d6801a987022ab469fa142434bff9f024d33a22a2b412480d06c4ad8e216e29f2594c30899793ff081ad2b90d73037e7682a31d301b300c0603551d130101ff04023000300b0603551d0f0404030206c0300a06082a8648ce3d0403030369003066023100c041d21e244d9d6b694c6dedb97b54f93d08d1eca2a4db11e55d6791a7f1a003ffad20aafd5a3f90aaa32f392fd856b0023100c4a5c84ae1e2cf3b3dda30b6e54805d76ba565e914ad75daee1b7a6bb07e373912c23d9f7375d2198ca28c88818b2365'

    attestation_doc = base64.b64decode(EXAMPLE_ATT_DOC)

    data = cbor2.loads(attestation_doc)
    doc = data[2]
    doc_obj = cbor2.loads(doc)
    doc_obj['certificate'] = bytes.fromhex(certificate)
    assert attestation.validate_pki(doc_obj) == True


def test_validate_wrong_certificate():
    certificate = '1082027c30820201a0030201020210017fb8b2974076e900000000623b9237300a06082a8648ce3d04030330818e310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c034157533139303706035504030c30692d30646462303366366631663135633861662e75732d656173742d322e6177732e6e6974726f2d656e636c61766573301e170d3232303332333231333334305a170d3232303332343030333334335a308193310b30090603550406130255533113301106035504080c0a57617368696e67746f6e3110300e06035504070c0753656174746c65310f300d060355040a0c06416d617a6f6e310c300a060355040b0c03415753313e303c06035504030c35692d30646462303366366631663135633861662d656e63303137666238623239373430373665392e75732d656173742d322e6177733076301006072a8648ce3d020106052b810400220362000461501d1c1bdc606ef8ae45fd369f92132a5575dd9c1f93fe1913f832ad9324a4ae1e83d611045b84d37b790799023d6801a987022ab469fa142434bff9f024d33a22a2b412480d06c4ad8e216e29f2594c30899793ff081ad2b90d73037e7682a31d301b300c0603551d130101ff04023000300b0603551d0f0404030206c0300a06082a8648ce3d0403030369003066023100c041d21e244d9d6b694c6dedb97b54f93d08d1eca2a4db11e55d6791a7f1a003ffad20aafd5a3f90aaa32f392fd856b0023100c4a5c84ae1e2cf3b3dda30b6e54805d76ba565e914ad75daee1b7a6bb07e373912c23d9f7375d2198ca28c88818b2365'

    attestation_doc = base64.b64decode(EXAMPLE_ATT_DOC)

    data = cbor2.loads(attestation_doc)
    doc = data[2]
    doc_obj = cbor2.loads(doc)
    doc_obj['certificate'] = bytes.fromhex(certificate)
    with pytest.raises(crypto.Error):
        attestation.validate_pki(doc_obj)
